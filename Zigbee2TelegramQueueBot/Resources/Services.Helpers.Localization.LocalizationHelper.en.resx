<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddMoreTimeInTheQueueMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/cancel</value>
  </data>
  <data name="AddMoreTimeInTheQueueMenuText" xml:space="preserve">
    <value>Enter the number of minutes you want to add and tap SEND.</value>
  </data>
  <data name="AddMoreTimeInTheRoomMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/cancel</value>
  </data>
  <data name="AddMoreTimeInTheRoomMenuText" xml:space="preserve">
    <value>Enter the number of minutes you want to add and tap SEND.</value>
  </data>
  <data name="CommandNotRecognized" xml:space="preserve">
    <value>Command wasn't recognized. Please try again.</value>
  </data>
  <data name="doorIsLockedInstruction" xml:space="preserve">
    <value>Add yourself some time to cover both the person in the room and yourself.</value>
  </data>
  <data name="DoorIsLockedMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n</value>
  </data>
  <data name="EnqueueAlert" xml:space="preserve">
    <value>You are in the queue. Your position in the queue: [QUEUEPOS], approximate time to wait: [WAITTIME] minutes</value>
  </data>
  <data name="InactivityDequeueAlert" xml:space="preserve">
    <value>You were dequeued due to inactivity. Please try again if you still have the need.</value>
  </data>
  <data name="InBetweenQueueAndRoomMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/startsession\r\n/skip\r\n/dequeue\r\n/doorislocked</value>
  </data>
  <data name="InBetweenQueueAndRoomMenuText" xml:space="preserve">
    <value>The door is open and it's your turn.</value>
  </data>
  <data name="MainMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/status\r\n/enqueue</value>
  </data>
  <data name="MainMenuText" xml:space="preserve">
    <value>Main menu. You can get the room's status or enqueue</value>
  </data>
  <data name="NumberNotParsed" xml:space="preserve">
    <value>You have entered an invalid value. Please enter a number.</value>
  </data>
  <data name="NumberOverLimit" xml:space="preserve">
    <value>The value you've entered is over the limit. Please try again.</value>
  </data>
  <data name="OrderChangeAlert" xml:space="preserve">
    <value>Your new position in the queue is [QUEUEPOS]. Approximate time to wait: [WAITTIME] minutes</value>
  </data>
  <data name="QueueMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/cancelenqueue\r\n/skip\r\n/needmoretime</value>
  </data>
  <data name="QueueMenuText" xml:space="preserve">
    <value>You are in the queue. You can leave the queue or pass your turn to the person after you. If there's noone after you, you would leave the queue automatically.</value>
  </data>
  <data name="RoomMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/free\r\n/needmoretime\r\n/doorislocked</value>
  </data>
  <data name="RoomMenuText" xml:space="preserve">
    <value>You have occupied the room. If it is not you who's in the room, press DOOR IS LOCKED. If you need more time than expected and you want to notify the others, press NEED MORE TIME.</value>
  </data>
  <data name="SimpleMainMenuText" xml:space="preserve">
    <value>Main menu. You can check the status or subscribe to the changes of the status.</value>
  </data>
  <data name="SimpleRoomIsFree" xml:space="preserve">
    <value>The room is free. Subscribed (including you): [SUBCOUNT]</value>
  </data>
  <data name="SimpleRoomIsOccupied" xml:space="preserve">
    <value>The room is occupied. Subscribed (including you): [SUBCOUNT]</value>
  </data>
  <data name="SimpleStatusMenuText" xml:space="preserve">
    <value>The room is [ROOMSTATUS]. People subscribed: [SUBCOUNT]</value>
  </data>
  <data name="SimpleSubscribedMenuText" xml:space="preserve">
    <value>You are subscribed to the notifications. Press EXIT to unsubscribe.</value>
  </data>
  <data name="SkipFirstAlert" xml:space="preserve">
    <value>Your new position in the queue is [QUEUEPOS]. Approximate time to wait: [WAITTIME] minutes</value>
  </data>
  <data name="SkipOtherAlert" xml:space="preserve">
    <value>Your new position in the queue is [QUEUEPOS]. Approximate time to wait: [WAITTIME] minutes</value>
  </data>
  <data name="StatusFreeMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/occupy\r\n/exit</value>
  </data>
  <data name="StatusFreeMenuText" xml:space="preserve">
    <value>The room is free</value>
  </data>
  <data name="StatusOccupiedMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/enqueue\r\n/exit</value>
  </data>
  <data name="StatusOccupiedMenuText" xml:space="preserve">
    <value>The room is occupied. [QUEUESIZE] people currently in queue, approximate wait time [WAITMINUTES]</value>
  </data>
  <data name="TimeChangeAlert" xml:space="preserve">
    <value>Approximate time to wait changed to [WAITTIME] minutes.</value>
  </data>
  <data name="VisitDurationCustomMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/exit</value>
  </data>
  <data name="VisitDurationCustomMenuText" xml:space="preserve">
    <value>Enter the number of minutes you expect to remain in the room and tap SEND</value>
  </data>
  <data name="VisitDurationMenuCommands" xml:space="preserve">
    <value>\r\nAvailable commands:\r\n/5minutes\r\n/10minutes\r\n/15minutes\r\n/custom\r\n/exit</value>
  </data>
  <data name="VisitDurationMenuText" xml:space="preserve">
    <value>Enter your approximate room occupation time. This will let the others know when they would get into the room. You are NOT limited by this time limit.</value>
  </data>
</root>